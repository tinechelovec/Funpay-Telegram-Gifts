import asyncio
import os
from dotenv import load_dotenv
from pyrogram import Client

if not hasattr(Client, "send_gift"):
    raise RuntimeError(
        "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π –ø–∞–∫–µ—Ç 'pyrogram'. –ù—É–∂–µ–Ω —Ñ–æ—Ä–∫ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Stars.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: pip uninstall -y pyrogram && pip install -U pyrofork tgcrypto"
    )

load_dotenv()
API_ID = os.getenv("API_ID")
API_HASH = os.getenv("API_HASH")

if not API_ID or not API_HASH:
    raise SystemExit("–í .env –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å API_ID –∏ API_HASH –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞.")

API_ID = int(API_ID)

async def main():
    async with Client("stars", api_id=API_ID, api_hash=API_HASH, workdir="sessions") as app:
        me = await app.get_me()
        bal = await app.get_stars_balance()
        print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ {me.first_name} (ID: {me.id})")
        print(f"üåü –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥: {bal}")

if __name__ == "__main__":
    asyncio.run(main())
