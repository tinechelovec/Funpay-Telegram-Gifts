from __future__ import annotations

import json
from dataclasses import dataclass, asdict
from pathlib import Path
from typing import Dict, List, Tuple, Optional

HERE = Path(__file__).resolve().parent
GIFTS_JSON = HERE / "gifts.json"
SETS_JSON = HERE / "gift_sets.json"

CANCEL_TOKENS = {"0", "q", "–π", "exit", "quit", "–≤—ã—Ö–æ–¥", "–Ω–∞–∑–∞–¥", "–æ—Ç–º–µ–Ω–∞", "cancel", "back"}

DEFAULT_GIFTS: Dict[str, Dict] = {
    "1":  {"id": 5170145012310081615, "title": "‚ù§Ô∏è –°–µ—Ä–¥—Ü–µ",     "price": 15},
    "2":  {"id": 5170233102089322756, "title": "üêª –ú–µ–¥–≤–µ–¥—å",     "price": 15},
    "3":  {"id": 5170250947678437525, "title": "üéÅ –ü–æ–¥–∞—Ä–æ–∫",     "price": 25},
    "4":  {"id": 5168103777563050263, "title": "üåπ –†–æ–∑–∞",        "price": 25},
    "5":  {"id": 5170144170496491616, "title": "üéÇ –¢–æ—Ä—Ç",        "price": 50},
    "6":  {"id": 5170314324215857265, "title": "üíê –¶–≤–µ—Ç—ã",       "price": 50},
    "7":  {"id": 5170564780938756245, "title": "üöÄ –†–∞–∫–µ—Ç–∞",      "price": 50},
    "8":  {"id": 5168043875654172773, "title": "üèÜ –ö—É–±–æ–∫",       "price": 100},
    "9":  {"id": 5170690322832818290, "title": "üíç –ö–æ–ª—å—Ü–æ",      "price": 100},
    "10": {"id": 5170521118301225164, "title": "üíé –ê–ª–º–∞–∑",       "price": 100},
    "11": {"id": 6028601630662853006, "title": "üçæ –®–∞–º–ø–∞–Ω—Å–∫–æ–µ",  "price": 50},
}

@dataclass
class SetItem:
    gift_key: str
    qty: int = 1

@dataclass
class GiftSet:
    key: str
    title: str
    items: List[SetItem]

    def compute_price(self, base_gifts: Dict[str, Dict]) -> int:
        total = 0
        for it in self.items:
            if it.gift_key not in base_gifts:
                raise ValueError(
                    f"–í –Ω–∞–±–æ—Ä–µ {self.key} –æ–±–Ω–∞—Ä—É–∂–µ–Ω –ø–æ–¥–∞—Ä–æ–∫ {it.gift_key}, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç –≤ gifts.json."
                )
            price = int(base_gifts[it.gift_key]["price"])
            total += price * int(it.qty)
        return total

    def expand_to_gift_ids(self, base_gifts: Dict[str, Dict]) -> List[int]:
        expanded: List[int] = []
        for it in self.items:
            gift = base_gifts[it.gift_key]
            expanded.extend([int(gift["id"])] * int(it.qty))
        return expanded

def load_base_gifts() -> Dict[str, Dict]:
    if GIFTS_JSON.exists():
        with GIFTS_JSON.open("r", encoding="utf-8") as f:
            data = json.load(f)
        return {str(k): v for k, v in data.items()}
    return DEFAULT_GIFTS

def load_sets() -> Dict[str, GiftSet]:
    if SETS_JSON.exists():
        with SETS_JSON.open("r", encoding="utf-8") as f:
            raw = json.load(f)
        out: Dict[str, GiftSet] = {}
        for k, v in raw.items():
            items = [
                SetItem(gift_key=str(i["gift_key"]), qty=int(i.get("qty", 1)))
                for i in v.get("items", [])
            ]
            out[str(k)] = GiftSet(key=str(k), title=v.get("title", f"–ù–∞–±–æ—Ä {k}"), items=items)
        return out
    return {}

def save_sets(sets: Dict[str, GiftSet]) -> None:
    payload = {}
    for k, s in sets.items():
        payload[k] = {"title": s.title, "items": [asdict(it) for it in s.items]}
    with SETS_JSON.open("w", encoding="utf-8") as f:
        json.dump(payload, f, ensure_ascii=False, indent=2)

def resolve_to_gift_ids(key: str | int, base_gifts: Dict[str, Dict] | None = None) -> List[int]:
    base = base_gifts or load_base_gifts()
    sets = load_sets()
    key_s = str(key)
    if key_s in sets:
        return sets[key_s].expand_to_gift_ids(base)
    if key_s not in base:
        raise KeyError(f"–ü–æ–¥–∞—Ä–æ–∫ {key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return [int(base[key_s]["id"])]

def get_required_stars(key: str | int, base_gifts: Dict[str, Dict] | None = None) -> int:
    base = base_gifts or load_base_gifts()
    sets = load_sets()
    key_s = str(key)
    if key_s in sets:
        return sets[key_s].compute_price(base)
    if key_s not in base:
        raise KeyError(f"–ü–æ–¥–∞—Ä–æ–∫ {key} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    return int(base[key_s]["price"])

def _is_cancel_token(s: str) -> bool:
    return s.strip().lower() in CANCEL_TOKENS

def input_int(
    prompt: str,
    *,
    min_val: Optional[int] = None,
    max_val: Optional[int] = None,
    allow_blank: bool = False,
    allow_cancel: bool = True,
) -> Optional[int]:
    while True:
        s = input(prompt).strip()
        if allow_cancel and _is_cancel_token(s):
            return None
        if s == "" and allow_blank:
            return None
        if not s.lstrip("-").isdigit():
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            continue
        val = int(s)
        if min_val is not None and val < min_val:
            print(f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ {min_val}.")
            continue
        if max_val is not None and val > max_val:
            print(f"–ß–∏—Å–ª–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–µ –±–æ–ª—å—à–µ {max_val}.")
            continue
        return val

def input_str(prompt: str, *, allow_empty: bool = False, allow_cancel: bool = True) -> Optional[str]:
    while True:
        s = input(prompt).strip()
        if allow_cancel and _is_cancel_token(s):
            return None
        if s == "" and not allow_empty:
            print("–ü—É—Å—Ç–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            continue
        return s

def yes_no(prompt: str) -> bool:
    while True:
        s = input(f"{prompt} (y/n, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ").strip().lower()
        if _is_cancel_token(s):
            return False
        if s in ("y", "yes", "–¥", "–¥–∞"):
            return True
        if s in ("n", "no", "–Ω", "–Ω–µ—Ç"):
            return False
        print("–û—Ç–≤–µ—Ç—å—Ç–µ 'y' –∏–ª–∏ 'n'.")

def press_enter():
    input("–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

def print_gifts_catalog(base: Dict[str, Dict]):
    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–∞—Ä–∫–∏ (–∏–∑ gifts.json):")
    for k in sorted(base.keys(), key=lambda x: int(x)):
        g = base[k]
        print(f"  {k:>2}: {g['title']} ‚Äî {g['price']}‚≠ê (Telegram ID: {g['id']})")
    print()

def summarize_set(s: GiftSet, base: Dict[str, Dict]) -> Tuple[str, int]:
    lines = [f"[{s.key}] {s.title}"]
    total = 0
    for it in s.items:
        g = base[it.gift_key]
        price = int(g["price"]) * it.qty
        total += price
        lines.append(f"  ‚Ä¢ {g['title']} ‚Äî {it.qty} —à—Ç. = {price}‚≠ê (–∫–æ–¥ {it.gift_key})")
    lines.append(f"–ò—Ç–æ–≥–æ: {total}‚≠ê")
    return "\n".join(lines), total

def choose_existing_set_id(sets: Dict[str, GiftSet]) -> Optional[str]:
    if not sets:
        print("–ï—â—ë –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤.")
        return None
    print("\n–¢–µ–∫—É—â–∏–µ –Ω–∞–±–æ—Ä—ã:")
    for k in sorted(sets.keys(), key=lambda x: int(x)):
        print(f"  {k}: {sets[k].title}")
    sid = input_int("\n–£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–±–æ—Ä–∞ (0 ‚Äî –Ω–∞–∑–∞–¥): ", min_val=12, allow_cancel=True)
    if sid is None:
        return None
    sid_s = str(sid)
    if sid_s not in sets:
        print("–ù–∞–±–æ—Ä —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    return sid_s

def cmd_create_set():
    base = load_base_gifts()
    sets = load_sets()

    print("\n=== –°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ ===")
    print("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0, ¬´–æ—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´–Ω–∞–∑–∞–¥¬ª.")
    print_gifts_catalog(base)

    title = input_str("–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ (–∫–∞–∫ —É–≤–∏–¥–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—å –Ω–∞ FunPay): ", allow_empty=False, allow_cancel=True)
    if title is None:
        print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        press_enter()
        return

    print("\n–°–æ–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞.")
    print("–í–≤–æ–¥–∏—Ç–µ ID –ø–æ–¥–∞—Ä–∫–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É (1‚Äì11). –ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å.")
    gift_keys: List[str] = []
    i = 1
    while i <= 11:
        s = input(f"–ü–æ–¥–∞—Ä–æ–∫ ‚Ññ{i} ‚Äî ID (1‚Äì11, Enter ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ").strip()
        if _is_cancel_token(s):
            print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            press_enter()
            return
        if s == "":
            break
        if not s.isdigit() or s not in base:
            print("–£–∫–∞–∂–∏—Ç–µ ID –∏–∑ —Å–ø–∏—Å–∫–∞ (1‚Äì11).")
            continue
        gift_keys.append(s)
        i += 1

    if not gift_keys:
        print("–°–æ—Å—Ç–∞–≤ –ø—É—Å—Ç–æ–π ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        press_enter()
        return

    print("\n–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥–∞—Ä–∫–∞ (–≤ —à—Ç—É–∫–∞—Ö).")
    items: List[SetItem] = []
    for idx, gk in enumerate(gift_keys, start=1):
        qty = input_int(
            f"{idx}. {base[gk]['title']} ‚Äî —Å–∫–æ–ª—å–∫–æ –≤—ã–¥–∞–≤–∞—Ç—å (1‚Äì999, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ",
            min_val=1, max_val=999, allow_cancel=True
        )
        if qty is None:
            print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            press_enter()
            return
        items.append(SetItem(gift_key=gk, qty=qty))

    while True:
        set_id = input_int(
            "\n–£–∫–∞–∂–∏—Ç–µ ID –Ω–∞–±–æ—Ä–∞ (gift_tg –¥–ª—è FunPay, —á–∏—Å–ª–æ ‚â• 12, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ",
            min_val=12, max_val=10**9, allow_cancel=True
        )
        if set_id is None:
            print("–°–æ–∑–¥–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
            press_enter()
            return
        set_id_s = str(set_id)
        if set_id_s in sets:
            print("–≠—Ç–æ—Ç ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
            continue
        break

    gift_set = GiftSet(key=set_id_s, title=title, items=items)

    summary, _total = summarize_set(gift_set, base)
    print("\n–ü—Ä–æ–≤–µ—Ä–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–±–æ—Ä–∞:")
    print(summary)
    if yes_no("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞–±–æ—Ä"):
        sets[set_id_s] = gift_set
        save_sets(sets)
        print("‚úÖ –ù–∞–±–æ—Ä —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    else:
        print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    press_enter()

def cmd_edit_set():
    base = load_base_gifts()
    sets = load_sets()
    print("\n=== –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ ===")
    print("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0, ¬´–æ—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´–Ω–∞–∑–∞–¥¬ª.")
    sid = choose_existing_set_id(sets)
    if not sid:
        press_enter()
        return
    s = sets[sid]

    print("\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?")
    print("  1) –°–æ—Å—Ç–∞–≤ –Ω–∞–±–æ—Ä–∞ (–ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤)")
    print("  2) –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ –ø–æ–∑–∏—Ü–∏—è–º")
    print("  3) ID –Ω–∞–±–æ—Ä–∞ (gift_tg)")
    print("  4) –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞")
    print("  0) –ù–∞–∑–∞–¥")

    choice = input_int("–í–∞—à –≤—ã–±–æ—Ä: ", min_val=0, max_val=4, allow_cancel=True)
    if choice in (None, 0):
        press_enter()
        return

    changed = False

    if choice == 1:
        print_gifts_catalog(base)
        print("–í–≤–æ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø–æ–¥–∞—Ä–∫–∏ –ø–æ –æ–¥–Ω–æ–º—É (1‚Äì11). Enter ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å.")
        gift_keys: List[str] = []
        i = 1
        cancelled = False
        while i <= 11:
            val = input(f"–ü–æ–¥–∞—Ä–æ–∫ ‚Ññ{i} ‚Äî ID (Enter ‚Äî –∑–∞–∫–æ–Ω—á–∏—Ç—å, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ").strip()
            if _is_cancel_token(val):
                cancelled = True
                break
            if val == "":
                break
            if not val.isdigit() or val not in base:
                print("–£–∫–∞–∂–∏—Ç–µ ID –∏–∑ —Å–ø–∏—Å–∫–∞ (1‚Äì11).")
                continue
            gift_keys.append(val)
            i += 1
        if cancelled:
            print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        elif not gift_keys:
            print("–°–æ—Å—Ç–∞–≤ –ø—É—Å—Ç–æ–π ‚Äî –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.")
        else:
            new_items: List[SetItem] = []
            for idx, gk in enumerate(gift_keys, start=1):
                qty = input_int(
                    f"{idx}. {base[gk]['title']} ‚Äî –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (1‚Äì999, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ",
                    min_val=1, max_val=999, allow_cancel=True
                )
                if qty is None:
                    print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                    press_enter()
                    return
                new_items.append(SetItem(gift_key=gk, qty=qty))
            s.items = new_items
            changed = True

    elif choice == 2:
        if not s.items:
            print("–£ –Ω–∞–±–æ—Ä–∞ –Ω–µ—Ç –ø–æ–∑–∏—Ü–∏–π. –°–Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞–π—Ç–µ —Å–æ—Å—Ç–∞–≤ (–ø.1).")
        else:
            for it in s.items:
                qty = input_int(
                    f"{base[it.gift_key]['title']} ‚Äî –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (—Å–µ–π—á–∞—Å {it.qty}, 1‚Äì999, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ",
                    min_val=1, max_val=999, allow_cancel=True
                )
                if qty is None:
                    print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                    press_enter()
                    return
                it.qty = qty
            changed = True

    elif choice == 3:
        while True:
            new_id = input_int("–ù–æ–≤—ã–π ID –Ω–∞–±–æ—Ä–∞ (—á–∏—Å–ª–æ ‚â• 12, 0 ‚Äî –æ—Ç–º–µ–Ω–∞): ", min_val=12, allow_cancel=True)
            if new_id is None:
                print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
                press_enter()
                return
            new_id_s = str(new_id)
            if new_id_s in sets and new_id_s != s.key:
                print("–≠—Ç–æ—Ç ID —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π.")
                continue
            if new_id_s != s.key:
                sets.pop(s.key)
                s.key = new_id_s
                sets[new_id_s] = s
                changed = True
            break

    elif choice == 4:
        new_title = input_str("–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–∞–±–æ—Ä–∞: ", allow_empty=False, allow_cancel=True)
        if new_title is None:
            print("–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã.")
            press_enter()
            return
        s.title = new_title
        changed = True

    if changed:
        summary, _total = summarize_set(s, base)
        print("\n–û–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π –Ω–∞–±–æ—Ä:")
        print(summary)
        if yes_no("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
            save_sets(sets)
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
        else:
            print("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        print("–ò–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ—Ç.")
    press_enter()

def cmd_delete_set():
    sets = load_sets()
    print("\n=== –£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–±–æ—Ä–∞ ===")
    print("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ 0, ¬´–æ—Ç–º–µ–Ω–∞¬ª –∏–ª–∏ ¬´–Ω–∞–∑–∞–¥¬ª.")
    sid = choose_existing_set_id(sets)
    if not sid:
        press_enter()
        return

    if yes_no(f"–£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä {sid} –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ"):
        sets.pop(sid, None)
        save_sets(sets)
        print("‚úÖ –ù–∞–±–æ—Ä —É–¥–∞–ª—ë–Ω.")
    else:
        print("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    press_enter()

def cmd_list_sets():
    base = load_base_gifts()
    sets = load_sets()
    print("\n=== –°–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤ ===")
    if not sets:
        print("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞.")
    else:
        for k in sorted(sets.keys(), key=lambda x: int(x)):
            s = sets[k]
            summary, _total = summarize_set(s, base)
            print(summary)
            print(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –ª–æ—Ç–µ FunPay: gift_tg: {k}")
            print("-" * 40)
    press_enter()

def main_menu():
    while True:
        print("\n==============================")
        print("          –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é        ")
        print("==============================")
        print("–ü–æ–¥—Å–∫–∞–∑–∫–∞: –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –º–æ–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ 0 / ¬´–æ—Ç–º–µ–Ω–∞¬ª / ¬´–Ω–∞–∑–∞–¥¬ª.")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:")
        print("  1. –°–æ–∑–¥–∞—Ç—å –Ω–∞–±–æ—Ä")
        print("  2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–±–æ—Ä")
        print("  3. –£–¥–∞–ª–∏—Ç—å –Ω–∞–±–æ—Ä")
        print("  4. –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–±–æ—Ä—ã")
        print("  0. –í—ã—Ö–æ–¥")
        print()

        choice = input_int("–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç (0‚Äì4): ", min_val=0, max_val=4, allow_cancel=True)
        if choice in (None, 0):
            print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            break

        if choice == 1:
            cmd_create_set()
        elif choice == 2:
            cmd_edit_set()
        elif choice == 3:
            cmd_delete_set()
        elif choice == 4:
            cmd_list_sets()

if __name__ == "__main__":
    try:
        main_menu()
    except KeyboardInterrupt:
        print("\n–í—ã—Ö–æ–¥ (Ctrl+C).")
